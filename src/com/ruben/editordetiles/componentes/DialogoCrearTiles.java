/*
 * @Ruben@
 */
package com.ruben.editordetiles.componentes;

import com.ruben.editordetiles.canvas.utiles.Rectangulo;
import com.ruben.editordetiles.utils.Utiles;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JCheckBox;
import javax.swing.JPanel;

/**
 *
 * @author Ruben
 */
public class DialogoCrearTiles extends javax.swing.JDialog {

    PanelConImagenes pan;

    /**
     * Creates new form DialogoCrearTiles
     */
    public DialogoCrearTiles(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);

        pan = new PanelConImagenes(checkMostrarMatriz);
        panelParaCanvas.setLayout(new BorderLayout());
        panelParaCanvas.add(pan, BorderLayout.CENTER);
        //spinnerFilas.setValue(1);
        comboFormato.removeAllItems();
        comboFormato.addItem("jpg");
        comboFormato.addItem("png");
        comboFormato.addItem("bmp");
        
        spinnerFilas.setEnabled(false);
        comboFormato.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelParaCanvas = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnSeleccionarImagenes = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        spinnerFilas = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        checkMostrarMatriz = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        comboFormato = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear tile a partir de un conjunto de imagenes");

        panelParaCanvas.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout panelParaCanvasLayout = new javax.swing.GroupLayout(panelParaCanvas);
        panelParaCanvas.setLayout(panelParaCanvasLayout);
        panelParaCanvasLayout.setHorizontalGroup(
            panelParaCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        panelParaCanvasLayout.setVerticalGroup(
            panelParaCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        btnSeleccionarImagenes.setText("...");
        btnSeleccionarImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImagenesActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));

        spinnerFilas.setValue(1);
        spinnerFilas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerFilasStateChanged(evt);
            }
        });

        jLabel2.setText("Columnas:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerFilas, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checkMostrarMatriz.setSelected(true);
        checkMostrarMatriz.setText("Mostrar matriz");
        checkMostrarMatriz.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkMostrarMatrizStateChanged(evt);
            }
        });

        jLabel1.setText("Seleccionar archivos");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        comboFormato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Formato de salida");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSeleccionarImagenes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(checkMostrarMatriz)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeleccionarImagenes)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkMostrarMatriz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFormato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 385, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelParaCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelParaCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImagenesActionPerformed
        // TODO add your handling code here:

        File[] files = Utiles.seleccionDeArchivos(this);
        if (files != null) {
            pan.getSusImagenes().clear();
            for (File file : files) {
                pan.addImagen(file);
            }
            pan.cantidadDeImagenes = files.length;
        }
        pan.repaint();
        spinnerFilas.setEnabled(true);
        comboFormato.setEnabled(true);

    }//GEN-LAST:event_btnSeleccionarImagenesActionPerformed

    private void checkMostrarMatrizStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkMostrarMatrizStateChanged
        // TODO add your handling code here:
        pan.repaint();
    }//GEN-LAST:event_checkMostrarMatrizStateChanged

    private void spinnerFilasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerFilasStateChanged
       
       int val=(int)spinnerFilas.getValue();
       if(val<1){
           spinnerFilas.setValue(1);
       }
       if(val>pan.cantidadDeImagenes){
           spinnerFilas.setValue(pan.cantidadDeImagenes);
       }
       
        pan.repaint();
    }//GEN-LAST:event_spinnerFilasStateChanged

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:

        ArrayList<ObjetoImagen> imagenes = pan.getSusImagenes();
        int anchoBuffer = 0, altoBuffer = 0;
        int imagenMasAlta = 0;
        int anchoTotal = 0;
        int i=0;
        for (ObjetoImagen imagen : imagenes) {
            if (imagenMasAlta < imagen.suImagen.getHeight()) {
                imagenMasAlta = imagen.suImagen.getHeight();
            }
            if (i < (int) spinnerFilas.getValue()) {
                anchoBuffer += imagen.suImagen.getWidth();
            } else {
                if (anchoTotal < anchoBuffer) {
                    anchoTotal = anchoBuffer;
                }
                altoBuffer += imagenMasAlta;
               // System.out.println(altoBuffer);
                imagenMasAlta = 0;
                anchoBuffer = 0;
                i=0;
            }
            i++;
        }
         altoBuffer += imagenMasAlta;
        System.out.println("Ancho total: " + anchoTotal);
        System.out.println("Alto total: " + altoBuffer);
        String formatoSeleccionado = (String) comboFormato.getSelectedItem();
        BufferedImage b;
        if (formatoSeleccionado.equals("png")) {
            b = new BufferedImage(anchoTotal, altoBuffer, BufferedImage.TYPE_INT_ARGB);
        } else {
            b = new BufferedImage(anchoTotal, altoBuffer, BufferedImage.TYPE_INT_RGB);
        }

        Graphics g = b.getGraphics();
        for (ObjetoImagen imagen : imagenes) {
            g.drawImage(imagen.suImagen, imagen.suRectangulo.getX() - pan.posXDeLaMatrix, imagen.suRectangulo.getY() - pan.posYDeLaMatriz, null);
        }
        try {
            File f = Utiles.guardarArchivo(this);
            if (f != null) {
                ImageIO.write(b, formatoSeleccionado, f);
            }
        } catch (IOException ex) {
            Logger.getLogger(DialogoCrearTiles.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogoCrearTiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogoCrearTiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogoCrearTiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogoCrearTiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogoCrearTiles dialog = new DialogoCrearTiles(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSeleccionarImagenes;
    private javax.swing.JCheckBox checkMostrarMatriz;
    private javax.swing.JComboBox comboFormato;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panelParaCanvas;
    private javax.swing.JSpinner spinnerFilas;
    // End of variables declaration//GEN-END:variables

    class PanelConImagenes extends JPanel {

        int posXDeLaMatrix, posYDeLaMatriz;
        private ArrayList<ObjetoImagen> susImagenes;
        private JCheckBox checkDePadreMostrarMatriz;
        private int cantidadDeImagenes;

        public void setCantidadDeImagenes(int cantidadDeImagenes) {
            this.cantidadDeImagenes = cantidadDeImagenes;
        }

        public ArrayList<ObjetoImagen> getSusImagenes() {
            return susImagenes;
        }

        public void addImagen(File file) {
            try {
                BufferedImage buff = ImageIO.read(file);
                Rectangulo rect = new Rectangulo(0, 0, buff.getWidth(), buff.getHeight());
                ObjetoImagen oima = new ObjetoImagen(buff, file, rect);
                susImagenes.add(oima);
            } catch (IOException ex) {
                Logger.getLogger(DialogoCrearTiles.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        public void setSusImagenes(ArrayList<ObjetoImagen> susImagenes) {
            this.susImagenes = susImagenes;
        }

        public PanelConImagenes(JCheckBox ck) {
            susImagenes = new ArrayList<>();
            checkDePadreMostrarMatriz = ck;
            addMouseWheelListener(new MouseWheelListener() {
                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    if (e.isControlDown()) {
                        posXDeLaMatrix += e.getWheelRotation() * -50;
                    } else if (e.isAltDown()) {
                        Dimension d = DialogoCrearTiles.PanelConImagenes.this.getSize();
                        d.setSize(d.getWidth() + e.getWheelRotation() * 50, d.getHeight() + e.getWheelRotation() * 50);
                        Point p = DialogoCrearTiles.PanelConImagenes.this.getLocation();
                        p.setLocation(p.getX() + e.getWheelRotation() * -50, p.getY() + e.getWheelRotation() * -50);
                        // DialogoCrearTiles.PanelConImagenes.this.setSize(d);
                    } else {
                        posYDeLaMatriz += e.getWheelRotation() * -50;
                    }
                    repaint();
                }
            });
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            int posX = 0, posY = 0;
            int tilesEnX = 0;
            int imagenMasAlta = 0;
            for (ObjetoImagen oi : susImagenes) {
                if (imagenMasAlta < oi.getSuRectangulo().getAlto()) {
                    imagenMasAlta = oi.getSuRectangulo().getAlto();
                }
                oi.getSuRectangulo().setX(posX + posXDeLaMatrix);
                oi.getSuRectangulo().setY(posY + posYDeLaMatriz);
                g.drawImage(oi.getSuImagen(), posX + posXDeLaMatrix, posY + posYDeLaMatriz, oi.getSuRectangulo().getAncho(), oi.getSuRectangulo().getAlto(), null);
                if (checkDePadreMostrarMatriz.isSelected()) {
                    oi.getSuRectangulo().dibujarRectangulo((Graphics2D) g, Color.red);

                }

                tilesEnX++;
                if (tilesEnX >= (int) spinnerFilas.getValue()) {
                    posX = 0;
                    tilesEnX = 0;
                    posY += imagenMasAlta;
                    imagenMasAlta = 0;
                } else {
                    posX += oi.getSuRectangulo().getAncho();
                }

            }

        }

    }

    static class ObjetoImagen {

        private BufferedImage suImagen;
        private File suArchivo;
        private Rectangulo suRectangulo;

        public BufferedImage getSuImagen() {
            return suImagen;
        }

        public void setSuImagen(BufferedImage suImagen) {
            this.suImagen = suImagen;
        }

        public File getSuArchivo() {
            return suArchivo;
        }

        public void setSuArchivo(File suArchivo) {
            this.suArchivo = suArchivo;
        }

        public Rectangulo getSuRectangulo() {
            return suRectangulo;
        }

        public void setSuRectangulo(Rectangulo suRectangulo) {
            this.suRectangulo = suRectangulo;
        }

        public ObjetoImagen(BufferedImage suImagen, File suArchivo, Rectangulo suRectangulo) {
            this.suImagen = suImagen;
            this.suArchivo = suArchivo;
            this.suRectangulo = suRectangulo;
        }

    }

}
